[
    {
        "id": "484d527654f4faf6",
        "type": "mqtt in",
        "z": "aec8441d76db9b8c",
        "name": "SensorPulso",
        "topic": "SensorPulso",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "4be07c57663e647c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 520,
        "wires": [
            [
                "da816062fd5e0247",
                "3f20e2758fca80a1"
            ]
        ]
    },
    {
        "id": "da816062fd5e0247",
        "type": "function",
        "z": "aec8441d76db9b8c",
        "name": "convertePayloadBpm",
        "func": "// Converte o payload do MQTT para um n√∫mero e valida o BPM\nmsg.bpm = parseInt(msg.payload); // Ajuste conforme o formato do dado recebido no MQTT\n\nif (msg.bpm > 100) {\n    node.warn(`BPM elevado: ${msg.bpm}. Continuando o fluxo...`);\n    return msg; // Prossegue para o pr√≥ximo n√≥\n} else {\n    node.warn(`BPM normal (${msg.bpm}). Fluxo encerrado.`);\n    return null; // Interrompe o fluxo\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 420,
        "wires": [
            [
                "997661a00c3ae2e1"
            ]
        ]
    },
    {
        "id": "997661a00c3ae2e1",
        "type": "function",
        "z": "aec8441d76db9b8c",
        "name": "variavel_global_token",
        "func": "global.set(\"spotify_access_token\", \"BQAESVBffsC2FgQUrfgr-0fDF2QzxBndDohieoYNxxQcbuyASTJExqQNRPpf4ypf5yJMmjPr5tfbS47MR5J2FVwbR_WSj6VkZoTCdXzr6jp7K-2CcE5dOxJIWVPNaWh5hIvA9601mijDdyeRS90VQ7eeRz2o6A5osuAlJnxC3OpGmN3nzNuGBfuX_cPSzMS5jw\");\nreturn msg;  // Prossegue para o pr√≥ximo n√≥\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 420,
        "wires": [
            [
                "7d60c684e2086e6a"
            ]
        ]
    },
    {
        "id": "7d60c684e2086e6a",
        "type": "function",
        "z": "aec8441d76db9b8c",
        "name": "autorizaAcessoApi",
        "func": "// Converte o payload do MQTT para um n√∫mero e valida o BPM\nmsg.bpm = parseInt(msg.payload);\n\n// Verifica se o BPM est√° elevado\nif (msg.bpm > 100) {\n    node.warn(`BPM elevado: ${msg.bpm}. Continuando o fluxo...`);\n\n    // Requisi√ß√£o para buscar playlists\n    msg.url = \"https://api.spotify.com/v1/search?q=rock&type=playlist\"; // Pesquisando por playlists que tenham os dois termos\n    msg.method = \"GET\";  // M√©todo GET para buscar dados da API\n\n    // Definir o token de autoriza√ß√£o no cabe√ßalho da requisi√ß√£o\n    msg.headers = {\n        Authorization: `Bearer ${global.get(\"spotify_access_token\")}`  // Usando o token global do Spotify\n    };\n\n    return msg; // Prossegue para o n√≥ HTTP Request\n} else {\n    node.warn(`BPM normal (${msg.bpm}). Fluxo encerrado.`);\n    return null; // Interrompe o fluxo caso o BPM seja normal\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 420,
        "wires": [
            [
                "50b48a4b856bdfe7"
            ]
        ]
    },
    {
        "id": "50b48a4b856bdfe7",
        "type": "http request",
        "z": "aec8441d76db9b8c",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1120,
        "y": 420,
        "wires": [
            [
                "f1a0fb61772f255a"
            ]
        ]
    },
    {
        "id": "f1a0fb61772f255a",
        "type": "function",
        "z": "aec8441d76db9b8c",
        "name": "trataMensagemWhatsApp",
        "func": "// Verifica se msg.payload √© um objeto ou uma string JSON\nlet response;\n\nif (typeof msg.payload === \"string\") {\n    // Se for uma string JSON, faz o parse\n    response = JSON.parse(msg.payload);\n} else {\n    // Caso j√° seja um objeto, apenas usa ele diretamente\n    response = msg.payload;\n}\n\n// Verifica se existem playlists na resposta\nif (response.playlists && response.playlists.items.length > 0) {\n    let playlist = response.playlists.items[0]; // Pega a primeira playlist\n    let playlistLink = playlist.external_urls.spotify; // Link externo da playlist\n\n    // Formata a mensagem do WhatsApp\n    msg.payload = `Seu n√≠vel de BPM √©: ${msg.bpm}. Vamos escutar uma m√∫sica e relaxar! üé∂\\nAqui est√° uma playlist para voc√™: ${playlistLink}`;\n    \n    return msg;  // Prossegue para o n√≥ que envia a mensagem ao WhatsApp\n} else {\n    node.warn(\"Nenhuma playlist encontrada.\");\n    return null;  // N√£o prossegue se n√£o encontrar playlist\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 440,
        "wires": [
            [
                "9a547b44dd47b025"
            ]
        ]
    },
    {
        "id": "9a547b44dd47b025",
        "type": "node-red-contrib-whatsapp-cmb-send-message",
        "z": "aec8441d76db9b8c",
        "name": "",
        "credtype": "account",
        "account": "e665c75ebb221323",
        "text": "payload",
        "phonenumbervalue": "",
        "apikeyvalue": "",
        "apikeyinputtypemessage": "msg",
        "phonenumberinputtypemessage": "msg",
        "inputtypemessage": "msg",
        "rejectssl": false,
        "x": 1500,
        "y": 320,
        "wires": [
            [
                "9e2bb0fc4f1faff7"
            ]
        ]
    },
    {
        "id": "9e2bb0fc4f1faff7",
        "type": "debug",
        "z": "aec8441d76db9b8c",
        "name": "debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1750,
        "y": 320,
        "wires": []
    },
    {
        "id": "4be07c57663e647c",
        "type": "mqtt-broker",
        "name": "test.mosquitto.org",
        "broker": "broker.hivemq.com",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "e665c75ebb221323",
        "type": "node-red-contrib-whatsapp-cmb-account",
        "name": "Yumi"
    }
]